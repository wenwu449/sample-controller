/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/sample-controller/pkg/apis/crdappcontroller/v1alpha1"
)

// CrdappLister helps list Crdapps.
type CrdappLister interface {
	// List lists all Crdapps in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Crdapp, err error)
	// Crdapps returns an object that can list and get Crdapps.
	Crdapps(namespace string) CrdappNamespaceLister
	CrdappListerExpansion
}

// crdappLister implements the CrdappLister interface.
type crdappLister struct {
	indexer cache.Indexer
}

// NewCrdappLister returns a new CrdappLister.
func NewCrdappLister(indexer cache.Indexer) CrdappLister {
	return &crdappLister{indexer: indexer}
}

// List lists all Crdapps in the indexer.
func (s *crdappLister) List(selector labels.Selector) (ret []*v1alpha1.Crdapp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Crdapp))
	})
	return ret, err
}

// Crdapps returns an object that can list and get Crdapps.
func (s *crdappLister) Crdapps(namespace string) CrdappNamespaceLister {
	return crdappNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CrdappNamespaceLister helps list and get Crdapps.
type CrdappNamespaceLister interface {
	// List lists all Crdapps in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Crdapp, err error)
	// Get retrieves the Crdapp from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Crdapp, error)
	CrdappNamespaceListerExpansion
}

// crdappNamespaceLister implements the CrdappNamespaceLister
// interface.
type crdappNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Crdapps in the indexer for a given namespace.
func (s crdappNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Crdapp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Crdapp))
	})
	return ret, err
}

// Get retrieves the Crdapp from the indexer for a given namespace and name.
func (s crdappNamespaceLister) Get(name string) (*v1alpha1.Crdapp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("crdapp"), name)
	}
	return obj.(*v1alpha1.Crdapp), nil
}
